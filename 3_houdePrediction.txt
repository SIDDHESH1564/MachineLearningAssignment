# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import numpy as np

# Load the dataset
data = pd.read_csv('/content/Housing.csv')

# Decide dependent and independent variables
X = data[['area', 'bedrooms', 'bathrooms', 'stories', 'parking']]  # Independent variables
y = data['price']  # Dependent variable

# Split the data into train (80%) and test (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a multiple regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Find accuracy score
accuracy = model.score(X_test, y_test)
print(f'Accuracy score: {accuracy}')

# Perform prediction
y_pred = model.predict(X_test)

# Find mean squared error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Print coefficients and intercept
print('Coefficients:', model.coef_)
print('Intercept:', model.intercept_)

# Plot the linear model
plt.figure(figsize=(12, 6))

# Plot for feature1
plt.subplot(2, 2, 1)
plt.scatter(X_test['area'], y_test, color='blue')
plt.plot(X_test['area'], y_pred, color='red', linewidth=2)
plt.xlabel('area')
plt.ylabel('Price')
plt.title('Linear Regression Model')

# Plot for feature2
plt.subplot(2, 2, 2)
plt.scatter(X_test['bedrooms'], y_test, color='green')
plt.plot(X_test['bedrooms'], y_pred, color='red', linewidth=2)
plt.xlabel('bedrooms')
plt.ylabel('Price')
plt.title('Linear Regression Model')

# Plot for feature3
plt.subplot(2, 2, 3)
plt.scatter(X_test['bathrooms'], y_test, color='orange')
plt.plot(X_test['bathrooms'], y_pred, color='red', linewidth=2)
plt.xlabel('bathrooms')
plt.ylabel('Price')
plt.title('Linear Regression Model')

# Plot for feature4
plt.subplot(2, 2, 4)
plt.scatter(X_test['stories'], y_test, color='purple')
plt.plot(X_test['stories'], y_pred, color='red', linewidth=2)
plt.xlabel('stories')
plt.ylabel('Price')
plt.title('Linear Regression Model')

plt.tight_layout()
plt.show()

# Perform prediction
y_pred = model.predict(X_test)

# Perform prediction
y_pred = model.predict(X_test)

# Plot the actual vs predicted values with regression line
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red')  # Regression line
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual vs Predicted Price with Regression Line')
plt.show()

